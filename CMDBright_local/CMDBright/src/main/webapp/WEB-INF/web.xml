<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	id="WebApp_ID" version="2.5" metadata-complete="true">

<!-- 
/*****************************************************************************
 * CMDBright - Clear and nimble Configuration Management DataBase 
 * Copyright (C) 2016  Eladio Fernández Barrigüete
 * 
 * This file is part of CMDBright.
 * 
 * CMDBright is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * CMDBright is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with CMDBright.  If not, see <http://www.gnu.org/licenses/>.
******************************************************************************/
 -->

	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet>
		<display-name>Apache-Axis Servlet</display-name>
		<servlet-name>AxisServlet</servlet-name>
		<servlet-class>org.apache.axis.transport.http.AxisServlet</servlet-class>
	</servlet>
	<servlet>
		<display-name>Axis Admin Servlet</display-name>
		<servlet-name>AdminServlet</servlet-name>
		<servlet-class>org.apache.axis.transport.http.AdminServlet</servlet-class>
		<load-on-startup>100</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>/faces/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>AxisServlet</servlet-name>
		<url-pattern>/servlet/AxisServlet</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>AxisServlet</servlet-name>
		<url-pattern>*.jws</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>AxisServlet</servlet-name>
		<url-pattern>/services/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>AdminServlet</servlet-name>
		<url-pattern>/servlet/AdminServlet</url-pattern>
	</servlet-mapping>


	<context-param>
		<description>State saving method: 'client' or 'server' (=default). See JSF Specification 2.5.2</description>
		<param-name>javax.faces.STATE_SAVING_METHOD</param-name>
		<param-value>client</param-value>
	</context-param>

	<!-- Listener para JSF- implementación SUN (Mojarra) -->
	<listener>
		<listener-class>com.sun.faces.config.ConfigureListener</listener-class>
	</listener>

	<!-- Listener de contexto para Spring -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Para evitar error en tomcat: "Could not register destruction callback" -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring.xml
		<!-- 	/WEB-INF/security-context.xml -->
		</param-value>
	</context-param>

	<welcome-file-list>
		<welcome-file>faces/index.xhtml</welcome-file>
	</welcome-file-list>
	
	<!-- Para omitir los comentarios y que jsf no los considere como componentes (me pasaba en el panelGrid) -->
	<context-param>
	    <param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
	    <param-value>true</param-value>
	</context-param>	

	<!-- Themes y fuentes - otro posible: omega -->
	<context-param>
		<param-name>primefaces.THEME</param-name>
		<param-value>bootstrap</param-value>
	</context-param>
	<context-param>
		<param-name>primefaces.FONT_AWESOME</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Definición de páginas de error -->
	<error-page>
		<error-code>401</error-code>
		<location>/cmdbPrimefaces/faces/pags/errors/401.xhtml</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/cmdbPrimefaces/faces/pags/errors/404.xhtml</location>
	</error-page>

	<!-- Logger -->  

	<listener>
	   <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
<!--
	<context-param>
	   <param-name>log4jConfigLocation</param-name>
	   <param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
-->

<!-- 
	<error-page>
		<error-code>500</error-code>
		<location>/cmdbPrimefaces/faces/pags/errors/404.xhtml</location>
	</error-page>
    <error-page>
 		<exception-type>java.lang.Throwable</exception-type>
 		<location>/cmdbPrimefaces/faces/pags/errors/404.xhtml</location>
	</error-page>
	<error-page>
   		<exception-type>javax.servlet.ServletException</exception-type>
   		<location>/cmdbPrimefaces/faces/pags/errors/404.xhtml</location>
 	</error-page>
 	<error-page>
   		<exception-type>javax.faces.FacesException</exception-type>
   		<location>/cmdbPrimefaces/faces/pags/errors/404.xhtml</location>
 	</error-page>
 	<error-page>
 		<exception-type>java.lang.NullPointerException</exception-type>
 		<location>/cmdbPrimefaces/faces/pags/errors/404.xhtml</location>
 	</error-page>-->
 	
<!-- Este filtro es para SessionFactory de Hibernate, no vale para JPA 
	<filter>
		<filter-name>hibernateFilter</filter-name>
		<filter-class>
			org.springframework.orm.hibernate4.support.OpenSessionInViewFilter
		</filter-class>
		<init-param>
			<param-name>sessionFactoryBeanName</param-name>
			<param-value>mySessionFactory</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>hibernateFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
 -->
	<!-- Como el OpenSessionInViewFilter que usa Hibernate para SessionFactory (inyecta elementos LAZY) 
	<filter>
		<filter-name>OpenEntityManagerInViewFilter</filter-name>
		<filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
		<init-param>
			<param-name>entityManagerFactory</param-name>
			<param-value>entityManagerFactory</param-value>
		</init-param>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>flushMode</param-name>
			<param-value>AUTO</param-value>
		</init-param>
	</filter>
	<filter-mapping>
	    <filter-name>OpenEntityManagerInViewFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	
	DE MOMENTO ESTOY USANDO EAGER, cambiar a lazy?
	
	-->
</web-app>